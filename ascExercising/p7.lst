     1                                  bits 32
     2                                  ;sa se scrie in fisier pt fiecare numar numarul de biti de 1
     3                                  ;de la numerele citite de la tastatura
     4                                  global start        
     5                                  
     6                                  extern exit, scanf, printf, fopen, fprintf, fread, fclose, fwrite
     7                                  import exit msvcrt.dll
     8                                  import scanf msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  import fopen msvcrt.dll
    11                                  import fprintf msvcrt.dll
    12                                  import fread msvcrt.dll
    13                                  import fclose msvcrt.dll
    14                                  import fwrite msvcrt.dll
    15                                  
    16                                  segment data use32 class=data
    17 00000000 FFFFFFFF                    desc_fisier dd -1
    18 00000004 6F75747075742E7478-         nume_fisier db "output.txt", 0
    18 0000000D 7400               
    19 0000000F 257300                      fmt_s db "%s", 0
    20 00000012 256300                      fmt_c db "%c", 0
    21 00000015 256400                      fmt_d db "%d", 0
    22 00000018 772B00                      access db "w+", 0
    23 0000001B 0A00                        new_line db "", 10, 0
    24 0000001D 6E203D2000                  p_n db "n = ", 0
    25 00000022 00000000                    n dd 0
    26 00000026 00000000                    numar dd 0
    27 0000002A 496E74726F64756365-         msg db "Introduceti numere pana la 0: ", 10, 13, 0
    27 00000033 7469206E756D657265-
    27 0000003C 2070616E61206C6120-
    27 00000045 303A200A0D00       
    28 0000004B 00                          nr_biti db 0
    29 0000004C 00                          c_pare db 0
    30                                      
    31                                  segment code use32 class=code
    32                                      start:
    33 00000000 68[18000000]                    push dword access
    34 00000005 68[04000000]                    push dword nume_fisier
    35 0000000A FF15[00000000]                  call [fopen]
    36 00000010 83C408                          add esp, 4*2
    37                                          
    38 00000013 83F800                          cmp eax, 0
    39 00000016 0F84D3000000                    je close
    40                                          
    41 0000001C A3[00000000]                    mov [desc_fisier], eax
    42                                          
    43 00000021 68[1D000000]                    push dword p_n
    44 00000026 FF15[00000000]                  call [printf]
    45 0000002C 83C404                          add esp, 4
    46                                          
    47 0000002F 68[22000000]                    push dword n
    48 00000034 68[15000000]                    push dword fmt_d
    49 00000039 FF15[00000000]                  call [scanf]
    50 0000003F 83C408                          add esp, 4*2
    51                                          
    52 00000042 68[2A000000]                    push dword msg
    53 00000047 FF15[00000000]                  call [printf]
    54 0000004D 83C404                          add esp, 4
    55                                          
    56                                          citire_nr:
    57 00000050 68[26000000]                        push dword numar
    58 00000055 68[15000000]                        push dword fmt_d
    59 0000005A FF15[00000000]                      call [scanf]
    60 00000060 83C408                              add esp, 4*2
    61                                              
    62 00000063 833D[26000000]00                    cmp dword [numar], 0
    63 0000006A 7474                                je final
    64                                              
    65 0000006C A1[26000000]                        mov eax, [numar]
    66 00000071 C605[4C000000]00                    mov byte [c_pare], 0
    67                                              check_nr:
    68                                                  
    69 00000078 83F800                                  cmp eax, 0
    70 0000007B 7422                                    je done
    71                                                  
    72 0000007D BA00000000                              mov edx, 0
    73 00000082 BB0A000000                              mov ebx, 10
    74                                                  
    75 00000087 F7F3                                    div ebx
    76                                                  
    77 00000089 50                                      push eax
    78                                                  
    79 0000008A 6689D0                                  mov ax, dx
    80 0000008D B302                                    mov bl, 2
    81 0000008F F6F3                                    div bl
    82                                                  
    83 00000091 80FC00                                  cmp ah, 0
    84                                                  
    85 00000094 7506                                    jne ok
    86                                                  
    87                                                  
    88 00000096 FE05[4C000000]                          inc byte [c_pare]
    89                                                  
    90                                                  ok:
    91 0000009C 58                                      pop eax
    92 0000009D EBD9                                    jmp check_nr
    93                                              
    94                                              done:
    95 0000009F A1[22000000]                        mov eax, [n]
    96 000000A4 3B05[4C000000]                      cmp eax, [c_pare]
    97                                              
    98 000000AA 752F                                jne not_equal
    99                                              
   100 000000AC 60                                  pushad
   101                                              
   102 000000AD FF35[26000000]                      push dword [numar]
   103 000000B3 68[15000000]                        push dword fmt_d
   104 000000B8 FF35[00000000]                      push dword [desc_fisier]
   105 000000BE FF15[00000000]                      call [fprintf]
   106 000000C4 83C40C                              add esp, 4*3
   107                                              
   108 000000C7 68[1B000000]                        push dword new_line
   109 000000CC FF35[00000000]                      push dword [desc_fisier]
   110 000000D2 FF15[00000000]                      call [fprintf]
   111 000000D8 83C408                              add esp, 4*2
   112                                              
   113                                              not_equal:
   114                                                  
   115 000000DB E970FFFFFF                      jmp citire_nr
   116                                          
   117                                      final:
   118                                      
   119 000000E0 FF35[00000000]                  push dword [desc_fisier]
   120 000000E6 FF15[00000000]                  call [fclose]
   121 000000EC 83C404                          add esp, 4
   122                                          
   123                                      close:
   124 000000EF 6A00                            push dword 0
   125 000000F1 FF15[00000000]                  call [exit]
