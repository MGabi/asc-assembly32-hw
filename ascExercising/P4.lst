     1                                  bits 32
     2                                  ;se citeste n
     3                                  ;se citesc nr pana la 0
     4                                  ;se scriu in fisier numerele cu n cifre pare 
     5                                  global start        
     6                                  
     7                                  extern exit, scanf, printf, fopen, fprintf, fread, fclose, fwrite
     8                                  import exit msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import printf msvcrt.dll
    11                                  import fopen msvcrt.dll
    12                                  import fprintf msvcrt.dll
    13                                  import fread msvcrt.dll
    14                                  import fclose msvcrt.dll
    15                                  import fwrite msvcrt.dll
    16                                  
    17                                  segment data use32 class=data
    18 00000000 FFFFFFFF                    desc_fisier dd -1
    19 00000004 257300                      fmt_s db "%s", 0
    20 00000007 256300                      fmt_c db "%c", 0
    21 0000000A 256400                      fmt_d db "%d", 0
    22 0000000D 257800                      fmt_x db "%x", 0
    23 00000010 6E203D2000                  p_n db "n = ", 0
    24 00000015 772B00                      access db "w+", 0
    25 00000018 00                          n db 0
    26 00000019 00000000                    numar dd 0
    27 0000001D 00                          finalnr db 0
    28 0000001E 6669736965722E6F75-         nume_fisier db "fisier.out", 0
    28 00000027 7400               
    29 00000029 0A0D00                      new_line db 10, 13, 0
    30 0000002C 00                          nr_pare db 0
    31                                      
    32                                      
    33                                  segment code use32 class=code
    34                                      start:
    35                                          
    36 00000000 68[10000000]                    push dword p_n
    37 00000005 FF15[00000000]                  call [printf]
    38 0000000B 83C404                          add esp, 4
    39                                          
    40 0000000E 68[18000000]                    push dword n
    41 00000013 68[0A000000]                    push dword fmt_d
    42 00000018 FF15[00000000]                  call [scanf]
    43 0000001E 83C408                          add esp, 4*2
    44                                          
    45 00000021 68[15000000]                    push dword access
    46 00000026 68[1E000000]                    push dword nume_fisier
    47 0000002B FF15[00000000]                  call [fopen]
    48 00000031 83C408                          add esp, 4*2
    49                                          
    50 00000034 83F800                          cmp eax, 0
    51 00000037 0F8491000000                    je close
    52                                          
    53 0000003D A3[00000000]                    mov [desc_fisier], eax
    54                                          
    55                                          
    56                                          citeste:
    57                                              
    58 00000042 68[19000000]                        push dword numar
    59 00000047 68[0A000000]                        push dword fmt_d
    60 0000004C FF15[00000000]                      call [scanf]
    61 00000052 83C408                              add esp, 4*2
    62                                              
    63 00000055 A1[19000000]                        mov eax, [numar]
    64 0000005A 83F800                              cmp eax, 0
    65 0000005D 7460                                je final
    66                                              
    67 0000005F C605[2C000000]00                    mov byte [nr_pare], 0
    68                                              numara:
    69 00000066 83F800                                  cmp eax, 0
    70 00000069 7429                                    je out_of_nr
    71                                                  
    72 0000006B BA00000000                              mov edx, 0
    73 00000070 BB0A000000                              mov ebx, 10
    74 00000075 F7F3                                    div ebx
    75                                                  
    76                                                  ;EAX = nr / 10
    77                                                  ;EDX = nr % 10
    78                                                  
    79 00000077 50                                      push eax
    80                                                  
    81 00000078 89D0                                    mov eax, edx
    82 0000007A BA00000000                              mov edx, 0
    83                                                  
    84 0000007F BB02000000                              mov ebx, 2
    85 00000084 F7F3                                    div ebx
    86                                                  
    87 00000086 58                                      pop eax
    88                                                  
    89 00000087 83FA00                                  cmp edx, 0
    90 0000008A 7506                                    jne not_even
    91                                                  
    92 0000008C FE05[2C000000]                          inc byte [nr_pare]
    93                                                  
    94                                                  not_even:
    95                                                  
    96 00000092 EBD2                                jmp numara
    97                                              
    98                                              out_of_nr:
    99 00000094 A0[2C000000]                        mov al, [nr_pare]
   100 00000099 8A25[18000000]                      mov ah, [n]
   101 0000009F 38E0                                cmp al, ah
   102 000000A1 721A                                jb continue
   103                                              
   104                                              printeaza:
   105                                                  
   106 000000A3 FF35[19000000]                          push dword [numar]
   107 000000A9 68[0D000000]                            push dword fmt_x
   108 000000AE FF35[00000000]                          push dword [desc_fisier]
   109 000000B4 FF15[00000000]                          call [fprintf]
   110 000000BA 83C408                                  add esp, 4*2
   111                                              
   112                                              continue:
   113 000000BD EB83                            jmp citeste
   114                                              
   115                                      final:
   116                                      
   117 000000BF FF35[00000000]                  push dword [desc_fisier]
   118 000000C5 FF15[00000000]                  call [fclose]
   119 000000CB 83C404                          add esp, 4
   120                                          
   121                                      close:
   122 000000CE 6A00                            push dword 0
   123 000000D0 FF15[00000000]                  call [exit]
