     1                                  bits 32
     2                                  
     3                                  global start        
     4                                  
     5                                  extern exit, printf
     6                                  import exit msvcrt.dll
     7                                  import printf msvcrt.dll
     8                                  
     9                                  segment data use32 class=data
    10 00000000 2573000000                  fmts db "%s", 0, 0, 0
    11 00000005 2563000000                  fmtc db "%c", 0, 0, 0
    12 0000000A 2B3432613334583537-         s1 db '+', '4', '2', 'a', '3', '4', 'X', '5', '7', '8', 0
    12 00000013 3800               
    13                                      l1 equ $-s1
    14 00000015 6134353600                  s2 db 'a', '4', '5', '6', 0
    15                                      l2 equ $-s2
    16 0000001A 00<rept>                    d times l1/3+l2 db 0
    17                                      l3 equ $-d
    18 00000022 00                          index db 0
    19                                      
    20                                  segment code use32 class=code
    21                                      start:
    22 00000000 B90B000000                      mov ecx, l1 ; setting how much time the first loop will be repeated
    23 00000005 BE00000000                      mov esi, 0;setting the index for start point in the s1 array
    24                                          ;jecxz End
    25                                          ParcurgereS1:
    26                                              ;checking if the position is a multiple of 3
    27 0000000A BA00000000                          mov edx, 0
    28 0000000F 89F0                                mov eax, esi
    29 00000011 BB03000000                          mov ebx, 3
    30 00000016 F7F3                                div ebx
    31                                              
    32                                              ;if the reminder is 0, the position is a multiple of 3
    33                                              ;and the jump `jnz` will not be executed
    34 00000018 85D2                                test edx, edx
    35 0000001A 7517                                jnz NotMultiple
    36                                              
    37                                              ;here we are adding in the final array the current element
    38 0000001C A1[22000000]                        mov eax, dword[index]
    39 00000021 8A9E[0A000000]                      mov bl, [s1+esi]
    40 00000027 8898[1A000000]                      mov [d+eax], bl
    41                                              
    42 0000002D FE05[22000000]                      inc byte[index];incrementing the index in the new array
    43                                              
    44                                              NotMultiple:
    45 00000033 46                                      inc esi
    46 00000034 E2D4                                    loop ParcurgereS1
    47                                                  
    48                                          ;now, we will add in reverse the elements from the second array
    49 00000036 BE03000000                      mov esi, l2-2
    50 0000003B B904000000                      mov ecx, l2-1
    51                                          ParcurgereS2:
    52                                              ;here we are adding in the final array the current element
    53 00000040 A1[22000000]                        mov eax, dword[index]
    54 00000045 8A9E[15000000]                      mov bl, [s2+esi]
    55 0000004B 8898[1A000000]                      mov [d+eax], bl
    56                                              
    57 00000051 4E                                  dec esi;decrementing the pointer for the second array, to go decreasingly
    58 00000052 FE05[22000000]                      inc byte[index];incrementing the index for the new array
    59 00000058 E2E6                                loop ParcurgereS2
    60                                          
    61                                          ;setting lenght in ecx and esi for index in array
    62                                          
    63                                          ;printing all at once
    64 0000005A 68[1A000000]                    push dword d
    65 0000005F 68[00000000]                    push dword fmts
    66 00000064 FF15[00000000]                  call [printf]
    67 0000006A 83C408                          add esp, 4*2
    68                                          
    69                                          ;printing one by one
    70                                          ; mov ecx, l3
    71                                          ; mov esi, 0
    72                                          
    73                                          ; AfisareD:
    74                                              ; mov eax, 0
    75                                              ; mov al, [d+esi]
    76                                              
    77                                              ; cbw
    78                                              ; cwde
    79                                              
    80                                              ; pushad
    81                                              
    82                                              ; push eax
    83                                              ; push dword fmtc
    84                                              ; call [printf]
    85                                              ; add esp, 4*2
    86                                              
    87                                              ; popad
    88                                              ; inc esi
    89                                              ; loop AfisareD
    90                                              
    91                                          End:
    92 0000006D 6A00                                push dword 0
    93 0000006F FF15[00000000]                      call [exit]
