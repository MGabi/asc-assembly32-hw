     1                                  bits 32
     2                                  
     3                                  global start        
     4                                  
     5                                  extern exit
     6                                  import exit msvcrt.dll
     7                                  
     8                                  segment data use32 class=data
     9 00000000 AA9A8D0A                    A dd 00001010100011011001101010101010b
    10 00000004 00000000                    B dd 0
    11 00000008 D51C                        a dw 0001110011010101b
    12 0000000A 7949                        b dw 0100100101111001b
    13 0000000C 00000000                    c dd 0
    14                                      
    15                                  segment code use32 class=code
    16                                      start:
    17                                          ;PB 14
    18                                          ;nr intreg reprezentat de bitii 14-17 ai lui A: 0110 = 6
    19 00000000 B800000000                      mov EAX, 0
    20 00000005 A1[00000000]                    mov EAX, [A]; EAX = 00001010100011011001101010101010b
    21                                          ;        00001010100011011001101010101010b
    22 0000000A 2500C00300                      and EAX, 00000000000000111100000000000000b
    23                                          ;   EAX= 00000000000000011000000000000000b
    24 0000000F C1E80E                          shr EAX, 14; EAX = 00000000000000000000000000000110b = 6 - acesta este numarul natural format din bitii 14-17 ai lui A
    25                                          ;rotirea spre stanga cu N pozitii, n = 8
    26 00000012 BB00000000                      mov EBX, 0
    27 00000017 8B1D[00000000]                  mov EBX, [A]; EBX = 00001010100011011001101010101010b = 177052330
    28 0000001D C1C308                          rol EBX, 8; EBX =   10001101100110101010101000001010b = 2375723530
    29 00000020 891D[04000000]                  mov [B], EBX
    30                                          ; PB 2
    31                                          ; Se dau cuvintele A si B. Se cere dublucuvantul C:
    32                                          ; bitii 0-3 ai lui C coincid cu bitii 5-8 ai lui B done
    33                                          ; bitii 4-8 ai lui C coincid cu bitii 0-4 ai lui A done
    34                                          ; bitii 9-15 ai lui C coincid cu bitii 6-12 ai lui A done
    35                                          ; bitii 16-31 ai lui C coincid cu bitii lui B
    36                                          
    37 00000026 B800000000                      mov EAX, 0
    38 0000002B BB00000000                      mov EBX, 0
    39 00000030 B900000000                      mov ECX, 0
    40 00000035 BA00000000                      mov EDX, 0
    41                                          
    42 0000003A A1[0A000000]                    mov EAX, dword[b];                            EAX = 00000000000000000100100101111001b
    43 0000003F 25E0010000                      and EAX, 00000000000000000000000111100000b
    44                                          ;   EAX =                                           00000000000000000000000101100000b
    45 00000044 C1E805                          shr EAX, 5 ;                                  EAX = 00000000000000000000000000001011b
    46 00000047 0905[0C000000]                  or [c], EAX ; [c] =                                 00000000000000000000000000001011b
    47 0000004D B800000000                      mov EAX, 0
    48 00000052 A1[08000000]                    mov EAX, dword[a] ;                           EAX = 00000000000000000001110011010101b
    49 00000057 83E01F                          and EAX, 00000000000000000000000000011111b
    50                                          ;                                             EAX = 00000000000000000000000000010101b
    51 0000005A C1E004                          shl EAX, 4 ;                                  EAX = 00000000000000000000000101010000b
    52 0000005D 0905[0C000000]                  or [c], EAX;                                  [c] = 00000000000000000000000101011011b   
    53 00000063 B800000000                      mov EAX, 0
    54 00000068 A1[08000000]                    mov EAX, dword[a];                            EAX = 00000000000000000001110011010101b
    55 0000006D 25C01F0000                      and EAX, 00000000000000000001111111000000b;   EAX = 00000000000000000001110011000000b
    56 00000072 C1E003                          shl EAX, 3;                                   EAX = 00000000000000001110011000000000b
    57                                          ;                                       old   [c] = 00000000000000000000000101011011b
    58 00000075 0905[0C000000]                  or [c], EAX;                            new   [c] = 00000000000000001110011101011011b
    59 0000007B B800000000                      mov EAX, 0
    60 00000080 A1[0A000000]                    mov EAX, dword[b] ;                            EAX = 00000000000000000100100101111001b
    61 00000085 C1E010                          shl EAX, 16 ;                                 EAX = 01001001011110010000000000000000b
    62 00000088 0905[0C000000]                  or [c], EAX ;                                 [c] = 01001001011110011110011101011011b
    63 0000008E BB00000000                      mov EBX, 0
    64 00000093 8B1D[0C000000]                  mov EBX, [c]
    65                                          
    66                                          
    67                                          
    68 00000099 6A00                            push dword 0
    69 0000009B FF15[00000000]                  call [exit]
